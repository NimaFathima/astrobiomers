version: '3.8'

services:
  # Neo4j Knowledge Graph
  neo4j:
    image: neo4j:5.12
    container_name: astrobiomers-neo4j
    ports:
      - "7474:7474"  # HTTP
      - "7687:7687"  # Bolt
    environment:
      - NEO4J_AUTH=neo4j/spacebiology123
      - NEO4J_dbms_memory_pagecache_size=1G
      - NEO4J_dbms_memory_heap_max__size=2G
      - NEO4J_apoc_export_file_enabled=true
      - NEO4J_apoc_import_file_enabled=true
      - NEO4J_apoc_import_file_use__neo4j__config=true
      - NEO4JLABS_PLUGINS=["apoc", "graph-data-science"]
    volumes:
      - neo4j_data:/data
      - neo4j_logs:/logs
      - neo4j_import:/var/lib/neo4j/import
      - neo4j_plugins:/plugins
    networks:
      - astrobiomers-network
    healthcheck:
      test: ["CMD-SHELL", "wget --no-verbose --tries=1 --spider localhost:7474 || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 5

  # PostgreSQL for user data and metadata
  postgres:
    image: postgres:15
    container_name: astrobiomers-postgres
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_USER=astrobiomers
      - POSTGRES_PASSWORD=spacebio_postgres
      - POSTGRES_DB=astrobiomers_db
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init_postgres.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - astrobiomers-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U astrobiomers"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis for caching and sessions
  redis:
    image: redis:7-alpine
    container_name: astrobiomers-redis
    ports:
      - "6379:6379"
    command: redis-server --appendonly yes --requirepass spacebio_redis
    volumes:
      - redis_data:/data
    networks:
      - astrobiomers-network
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Elasticsearch for full-text search
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.10.0
    container_name: astrobiomers-elasticsearch
    environment:
      - discovery.type=single-node
      - "ES_JAVA_OPTS=-Xms1g -Xmx1g"
      - xpack.security.enabled=false
      - xpack.security.enrollment.enabled=false
    ports:
      - "9200:9200"
      - "9300:9300"
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    networks:
      - astrobiomers-network
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:9200/_cluster/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Backend API
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: astrobiomers-backend
    ports:
      - "8000:8000"
    environment:
      - ENV=development
      - NEO4J_URI=bolt://neo4j:7687
      - NEO4J_USER=neo4j
      - NEO4J_PASSWORD=spacebiology123
      - POSTGRES_HOST=postgres
      - POSTGRES_PORT=5432
      - POSTGRES_DB=astrobiomers_db
      - POSTGRES_USER=astrobiomers
      - POSTGRES_PASSWORD=spacebio_postgres
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_PASSWORD=spacebio_redis
      - ELASTICSEARCH_HOST=elasticsearch
      - ELASTICSEARCH_PORT=9200
      - JWT_SECRET=your-secret-key-change-in-production
      - OPENAI_API_KEY=${OPENAI_API_KEY}
    volumes:
      - ./backend:/app
      - ./data:/data
    depends_on:
      neo4j:
        condition: service_healthy
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      elasticsearch:
        condition: service_healthy
    networks:
      - astrobiomers-network
    command: uvicorn main:app --host 0.0.0.0 --port 8000 --reload

  # Frontend React App
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: astrobiomers-frontend
    ports:
      - "3000:3000"
    environment:
      - REACT_APP_API_URL=http://localhost:8000
      - REACT_APP_WS_URL=ws://localhost:8000
    volumes:
      - ./frontend:/app
      - /app/node_modules
    depends_on:
      - backend
    networks:
      - astrobiomers-network
    command: npm start

  # Apache Airflow for data pipeline
  airflow-webserver:
    image: apache/airflow:2.7.1
    container_name: astrobiomers-airflow-webserver
    environment:
      - AIRFLOW__CORE__EXECUTOR=LocalExecutor
      - AIRFLOW__DATABASE__SQL_ALCHEMY_CONN=postgresql+psycopg2://astrobiomers:spacebio_postgres@postgres/astrobiomers_db
      - AIRFLOW__CORE__FERNET_KEY=${AIRFLOW_FERNET_KEY}
      - AIRFLOW__CORE__LOAD_EXAMPLES=False
      - AIRFLOW__WEBSERVER__SECRET_KEY=${AIRFLOW_SECRET_KEY}
    volumes:
      - ./data_pipeline/dags:/opt/airflow/dags
      - ./data_pipeline/logs:/opt/airflow/logs
      - ./data_pipeline/plugins:/opt/airflow/plugins
      - ./scripts:/opt/airflow/scripts
    ports:
      - "8080:8080"
    depends_on:
      - postgres
    networks:
      - astrobiomers-network
    command: webserver
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 5

  airflow-scheduler:
    image: apache/airflow:2.7.1
    container_name: astrobiomers-airflow-scheduler
    environment:
      - AIRFLOW__CORE__EXECUTOR=LocalExecutor
      - AIRFLOW__DATABASE__SQL_ALCHEMY_CONN=postgresql+psycopg2://astrobiomers:spacebio_postgres@postgres/astrobiomers_db
      - AIRFLOW__CORE__FERNET_KEY=${AIRFLOW_FERNET_KEY}
      - AIRFLOW__CORE__LOAD_EXAMPLES=False
    volumes:
      - ./data_pipeline/dags:/opt/airflow/dags
      - ./data_pipeline/logs:/opt/airflow/logs
      - ./data_pipeline/plugins:/opt/airflow/plugins
      - ./scripts:/opt/airflow/scripts
    depends_on:
      - postgres
    networks:
      - astrobiomers-network
    command: scheduler

  # MinIO for local S3-compatible storage
  minio:
    image: minio/minio:latest
    container_name: astrobiomers-minio
    ports:
      - "9000:9000"
      - "9001:9001"
    environment:
      - MINIO_ROOT_USER=astrobiomers
      - MINIO_ROOT_PASSWORD=spacebio_minio
    volumes:
      - minio_data:/data
    networks:
      - astrobiomers-network
    command: server /data --console-address ":9001"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3

volumes:
  neo4j_data:
  neo4j_logs:
  neo4j_import:
  neo4j_plugins:
  postgres_data:
  redis_data:
  elasticsearch_data:
  minio_data:

networks:
  astrobiomers-network:
    driver: bridge
